******* Class OutputStream *******

public abstract class OutputStream extends Object
                                   implements Closeable, Flushable

Все реализованные интерфейсы: Closeable, Flushable, AutoCloseable

Прямые известные подклассы: ByteArrayOutputStream, FileOutputStream, FilterOutputStream,
                            ObjectOutputStream, OutputStream, PipedOutputStream

Этот абстрактный класс является надклассом всех классов, представляющих выходной
поток байтов. Выходной поток принимает выходные байты и отправляет их в некоторый
приемник.

Приложения, которым необходимо определить подкласс OutputStream, всегда должны
предоставлять по крайней мере метод, записывающий один байт вывода.

См. так же более подробно: BufferedOutputStream, ByteArrayOutputStream,
                           DataOutputStream, FilterOutputStream,
                           InputStream, write(int)

******* МЕТОДЫ *******
- void close() - Закрывает текущий (данный) выходной поток и освобождает
               все системные ресурсы, связанные с этим потоком. Общий
               контракт (основная реализация) close заключается в том,
               что он закрывает выходной поток. Закрытый поток не может
               выполнять операции вывода и не может быть открыт повторно.

- void flush() - Сбрасывает этот выходной поток и принудительно записывает
               любые буферизованные выходные байты. Общий принцип сбрасывания
               заключается в том, что его вызов указывает на то, что если
               какие-либо ранее записанные байты были буферизованы реализацией
               выходного потока, такие байты должны быть немедленно записаны
               по назначению.

               Если предполагаемым назначением этого потока является абстракция,
               предоставляемая базовой операционной системой, например файл, то
               очистка потока гарантирует только то, что байты, ранее записанные
               в поток, передаются операционной системе для записи. Это не
               гарантирует, что они действительно записываются (будут записаны)
               на физическое устройство, такое как дисковод.

- void write(byte[] b) - Записывает байты b.length из указанного массива
                       байтов в этот выходной поток.

                       Общий контракт для write(b) заключается в том,
                       что он должен иметь точно такой же эффект, как
                       и вызов write(b, 0, b.length), где b - данные.

- void write(byte[] b, int off, int len) - Записывает len байтов из указанного
                                         массива байтов, начиная со смещения,
                                         в этот выходной поток.

    Общий контракт для write(b, off, len) заключается в том, что некоторые байты
    массива b записываются в выходной поток по порядку;
    элемент b[off] — это первый записанный байт, а b[off+len-1] — последний байт,
    записанный этой операцией.

    Метод записи OutputStream вызывает метод записи одного аргумента для каждого
    записываемого байта. Подклассам рекомендуется переопределять этот метод и
    обеспечивать более эффективную реализацию.

    Если b равно null, генерируется исключение NullPointerException.

    Если off имеет отрицательное значение, или len имеет отрицательное значение,
    или значение off+len больше, чем длина массива b, то создается исключение
    IndexOutOfBoundsException.

    Параметры:
        b - данные;
        off - начальное смещение в данных;
        len - количество байтов для записи.

- abstract void write(int b) - Записывает указанный байт в этот выходной поток.

    Общий контракт (основное условие) для записи заключается в том, что в выходной
    поток записывается один байт. Записываемый байт — это восемь младших битов
    аргумента b. 24 старших бита b игнорируются.

    Подклассы OutputStream должны обеспечивать реализацию этого метода.

-------------------------------------------------------------------------------------------
См. более подробно: https://docs.oracle.com/javase/7/docs/api/java/io/OutputStream.html
-------------------------------------------------------------------------------------------